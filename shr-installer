#!/usr/bin/env python
# -*- coding: utf-8 -*-

import dbus, e_dbus
import elementary, ecore
from functools import partial

mainloop = e_dbus.DBusEcoreMainLoop()
bus = dbus.SystemBus(mainloop=mainloop)

# define some nice dbus helper, which I really like, cause make code easier to read :)
def getDbusObject (bus, busname , objectpath , interface):
        dbusObject = bus.get_object(busname, objectpath)
        return dbus.Interface(dbusObject, dbus_interface=interface)

def dbus_ok(*args, **kwargs):
    print "dbus callback ok"

def dbus_err(x, *args, **kwargs):
    print "dbus callback error: " + str(x)

class SHRInstaller():

    packagekit = None

    def connect(self):
        if not self.packagekit:
            try:
                self.packagekit = getDbusObject (bus, 'org.freedesktop.PackageKit' , '/org/freedesktop/PackageKit', 'org.freedesktop.PackageKit')
            except:
                print "Trying again..."
                self.packagekit = getDbusObject (bus, 'org.freedesktop.PackageKit' , '/org/freedesktop/PackageKit', 'org.freedesktop.PackageKit')

    def checkConnection(self):
        if not self.packagekit:
            raise(IOError('Not connected to PackageKit!'))

    def getTid(self):
        return self.packagekit.GetTid()

    def transaction(self, tid = None):
        self.checkConnection()
        if not tid:
            tid = self.getTid()
        return getDbusObject (bus, 'org.freedesktop.PackageKit' , tid, 'org.freedesktop.PackageKit.Transaction')

    def __del__(self):
        if self.packagekit:
            print "Bye PackageKit!"
            self.packagekit.SuggestDaemonQuit()
        print "Bye!"

    def cancel(self, transaction):
        self.checkConnection()
        transaction.Cancel(reply_handler=dbus_ok, error_handler=dbus_err)

    def update(self, *args, **kwargs):
        self.checkConnection()
        tid = self.getTid()
        trans = self.transaction(tid)
        trans.RefreshCache(True, reply_handler=dbus_ok, error_handler=dbus_err)
#        print args
#        print kwargs
        if kwargs.get('finished_handler'):
            trans.connect_to_signal('Finished', kwargs['finished_handler'])
        if kwargs.get('progress_handler'):
            print kwargs['progress_handler']
            trans.connect_to_signal('ProgressChanged', kwargs['progress_handler'])
        return trans


    def search(self, name):
        self.checkConnection()
        self.transaction().SearchName('all', name, reply_handler=dbus_ok, error_handler=dbus_err)

class SHRInstallerGUI():

    class Bar(elementary.Box):
        btn1 = None
        btn2 = None
        box1 = None
        box2 = None
        bars = None

        def __init__(self, parent):
            super(SHRInstallerGUI.Bar, self).__init__(parent)

            self.bars = []

            self.horizontal_set(1)
            #self.pack_end(elementary.Button(self))
            self.box1 = elementary.Frame(self)
            self.box2 = elementary.Frame(self)

            self.box1.style_set('pad_small')
            self.box2.style_set('pad_small')

            self.box1.size_hint_weight_set(0.5, 1.0)
            self.box1.size_hint_align_set(-1.0, -1.0)

            self.box2.size_hint_weight_set(0.4, 1.0)
            self.box2.size_hint_align_set(-1.0, -1.0)

            self.box1.show()
            self.box2.show()
            self.pack_start(self.box1)
            self.pack_end(self.box2)
            self.size_hint_align_set(-1.0, 0.0) 

            self.push()

        def item(self, label, callback):
            if callback:
                btn = elementary.Button(self)
                btn.label_set(label)
                btn.clicked = callback
                btn.show()
            else:
                lab = elementary.Label(self)
                lab.label_set(label)
                lab.show()
                fr = elementary.Frame(self)
                fr.style_set('outdent_top')
                fr2 = elementary.Frame(self)
                fr2.style_set('pad_small')
                btn = elementary.Frame(self)
                btn.style_set('outdent_bottom')
                box = elementary.Box(btn)
                box.pack_end(lab)
                box.show()
                fr2.content_set(box)
                fr.content_set(fr2)
                btn.content_set(fr)
                fr.show()
                fr2.show()
                btn.show()
            btn.size_hint_weight_set(-1.0, -1.0)
#            btn.size_hint_align_set(1.0, 1.0)
            return btn


        def push(self, btn1l = "Next", btn2l = "Back", btn1c = None, btn2c = None):
            self.bars.append((btn1l, btn2l, btn1c, btn2c))
            self.update()

        def pop(self):
            self.bars.pop()
            self.update()

        def update(self):
            try:
                self.btn1.delete()
                self.btn2.delete()
            except:
                print "DEBUG: Bar delete"


            (btn1l, btn2l, btn1c, btn2c) = self.bars[len(self.bars)-1]
            self.btn1 = self.item(btn1l, btn1c)
            self.btn2 = self.item(btn2l, btn2c)
            self.box1.content_set(self.btn1)
            self.box2.content_set(self.btn2)


    installer = None
    win = None
    pager = None
    bar = None
    animstep = None

    def __init__(self, installer):
        self.installer = installer
        elementary.init()  
        # elementary configuration
        elementary.c_elementary.finger_size_set(95)
        self.win = elementary.Window('shr-installer', elementary.ELM_WIN_BASIC)
        self.pager = elementary.Pager(self.win)
        self.bar = self.Bar(self.win)
        self.animstep = -1

    def stepAnimation(self):
        if self.animation:
            self.animstep += 1
            if self.animstep==3:
                for anim in self.anim:
                    anim.hide()
                self.animstep = -1;
            else:
                self.anim[self.animstep].show()
            return True
        else:
            self.animstep = -1
            return False

    def startAnimation(self, box):
        self.anim = [elementary.Label(self.win), elementary.Label(self.win), elementary.Label(self.win)]
        for anim in self.anim:
            anim.label_set('.')
            box.pack_end(anim)
        self.animation = True
        ecore.timer_add(1, self.stepAnimation)

    def stopAnimation(self):
        self.animation = False
        for anim in self.anim:
            anim.show()

    def run(self):
        elementary.run()
        elementary.shutdown()
        print "..."
        self.installer = None

    def dialog(self, msg, ok = True):
        dia = elementary.InnerWindow(self.win)
        dia.scale_set(1.2)
        txt = elementary.AnchorBlock(dia)
        txt.text_set(msg)
        txt.show()
        fr = elementary.Frame(dia)
        fr.style_set('pad_medium')
        fr.content_set(txt)
        fr.show()
        dia.content_set(fr)
        dia.style_set("minimal_vertical")
        self.win.resize_object_add(dia)  
        dia.activate()
        return dia

    def destroy(self, *args, **kwargs):
        elementary.exit()

    def options(self, *args, **kwargs):
        scr = elementary.Scroller(self.pager)
        scr.show()
        box = elementary.Box(scr)
        label = elementary.Label(box)
        label.label_set('Options')
        label.show()
        box.pack_end(label)
        box.show()
        scr.content_set(box)
        self.pager.content_push(scr)
        self.bar.push('About', 'Back', self.about, self.back)

    def connect(self, dia):
        self.installer.connect()
        dia.delete()
        self.bar.push('Options', 'Quit', self.options, self.destroy)
        return False

    def updateFinished(self, lab, status, *args, **kwargs):
        if status=='success':
            lab.label_set('OK')
        elif status=='failed':
            lab.label_set('FAIL')
        else:
            lab.label_set('???')
            print status
        self.stopAnimation()
        self.bar.pop()

    def updateProgress(self, lab, pro, *args, **kwargs):
        if pro!=101:
            lab.label_set(str(pro) + '%')
            lab.color_set(0, 0, 0, (pro*2)+55 )

    def cancel(self, transaction, *args, **kwargs):
        self.installer.cancel(transaction)
        self.bar.pop()

    def update(self, *args, **kwargs):
        box = elementary.Box(self.pager)
        box.show()

        animbox = elementary.Box(box)
        animbox.horizontal_set(1)
        animbox.show()

        la = elementary.Label(animbox)
        la.label_set('Refreshing package list')
        la.show()

        animbox.pack_start(la)

        box.pack_start(animbox)

        lab = elementary.Label(box)
        lab.show()
        box.pack_end(lab)
        lab.scale_set(6.0)

        trans = self.installer.update(finished_handler=partial(self.updateFinished, lab), progress_handler=partial(self.updateProgress, lab))
        self.pager.content_push(box)
        self.startAnimation(animbox)
        self.bar.push('Next', 'Back', None, self.back)
        self.bar.push('Next', 'Cancel', None, None)

    def back(self, *args, **kwargs):
        self.pager.content_pop()
        self.bar.pop()

    def about(self, *args, **kwargs):
        anchorview = elementary.AnchorView(self.pager)

        text = '''<b>SHR Installer</b><br>This is SHR Installer!'''

        anchorview.text_set(text)
        anchorview.show()
        self.pager.content_push(anchorview)
        self.bar.push('Next', 'Back', None, self.back)

    def menu(self):
        box = elementary.Box(self.pager)
        fr = elementary.Frame(box)
        lab = elementary.Label(fr)#change to AnchorBlock
        lab.label_set('What do you want to do today?')

        lab.show()
        labox = elementary.Box(fr)
        labox.pack_start(lab)
        labox.show()
#        lab.size_hint_align_set(0.5, 0.0)
#        lab.size_hint_weight_set(-1.0, 0.0)
        fr.scale_set(1.3)
        fr.style_set('outdent_top')
        fr.content_set(labox)
        fr.show()
        fr.size_hint_align_set(-1.0, -1.0)
        fr.size_hint_weight_set(1.0, 0.0)
        list = elementary.List(self.pager)
        list.size_hint_weight_set(1.0, 1.0)
        list.size_hint_align_set(-1.0, -1.0)
        list.show()
        box.pack_start(fr)
        box.pack_end(list)
        box.show()

        items = [('Install new packages',None, None, None),
                 ('Upgrade system', None, None, None),
                 ('Update package cache', None, None, self.update),
                 ('Remove packages', None, None, None)]

        for item in items:
            list.item_append(item[0], item[1], item[2], item[3])

        self.pager.content_push(box)  

        list.go()

    def main(self):
        self.win.title_set('SHR Installer')
        self.win.destroy = self.destroy
        bg = elementary.Background(self.win)
        self.win.resize_object_add(bg)
        bg.show()

        box = elementary.Box(self.win)
        self.pager.scale_set(1.0)
        box.pack_start(self.pager)
        self.pager.size_hint_weight_set(1.0, 1.0)
        self.pager.size_hint_align_set(-1.0, -1.0)
        self.pager.show()

        box.pack_end(self.bar)
        self.bar.show()

        box.show()
        self.win.resize_object_add(box)
        self.menu()

        inwin = self.dialog('Connecting to PackageKit...', False)

        ecore.idler_add(partial(self.connect, inwin))

        self.win.show()

if __name__ == "__main__":
    ui = SHRInstallerGUI(SHRInstaller())
    ui.main()

    ui.run()
