#!/usr/bin/env python
# -*- coding: utf-8 -*-

import dbus, e_dbus
import elementary, ecore
from functools import partial
from sys import argv

# define some nice dbus helper, which I really like, cause make code easier to read :)
def getDbusObject (bus, busname , objectpath , interface):
        dbusObject = bus.get_object(busname, objectpath)
        return dbus.Interface(dbusObject, dbus_interface=interface)

def dbus_ok(*args, **kwargs):
    pass

def dbus_err(x, *args, **kwargs):
    print "dbus callback error: " + str(x)

class SHRInstaller():

    packagekit = None
    conf = None
    bus = None

    def __init__(self, bus, debug=False):
        self.bus = bus
        self.conf = {'shutdown-pk-on-exit':not(debug)} # FIXME

    def connect(self):
        if not self.packagekit:
            try:
                self.packagekit = getDbusObject (self.bus, 'org.freedesktop.PackageKit' , '/org/freedesktop/PackageKit', 'org.freedesktop.PackageKit')
            except:
                print "Trying again..."
                try:
                    self.packagekit = getDbusObject (self.bus, 'org.freedesktop.PackageKit' , '/org/freedesktop/PackageKit', 'org.freedesktop.PackageKit')
                except:
                    print "Couldn't connect to PackageKit"
                    return False
        return True

    def checkConnection(self):
        if not self.packagekit:
            raise(IOError('Not connected to PackageKit!'))

    def getTid(self):
        return self.packagekit.GetTid()

    def transaction(self, tid = None):
        self.checkConnection()
        if not tid:
            tid = self.getTid()
        return getDbusObject (self.bus, 'org.freedesktop.PackageKit' , tid, 'org.freedesktop.PackageKit.Transaction')

    def __del__(self):
        if self.packagekit:
            if self.conf['shutdown-pk-on-exit']:
                print "Bye PackageKit!"
                self.packagekit.SuggestDaemonQuit()
        print "Bye!"

    def cancel(self, transaction):
        self.checkConnection()
        transaction.Cancel(reply_handler=dbus_ok, error_handler=dbus_err)

    def update(self, *args, **kwargs):
        self.checkConnection()
        tid = self.getTid()
        trans = self.transaction(tid)
        dok = kwargs.get('reply_handler')
        if not dok:
            dok = dbus_ok
        derr = kwargs.get('error_handler')
        if not derr:
            derr = dbus_err

        trans.RefreshCache(True, reply_handler=dok, error_handler=derr)
        if kwargs.get('finished_handler'):
            trans.connect_to_signal('Finished', kwargs['finished_handler'])
        if kwargs.get('progress_handler'):
            trans.connect_to_signal('ProgressChanged', kwargs['progress_handler'])
        return trans

    def listUpgradable(self, *args, **kwargs):
        self.checkConnection()
        tid = self.getTid()
        trans = self.transaction(tid)
        dok = kwargs.get('reply_handler')
        if not dok:
            dok = dbus_ok
        derr = kwargs.get('error_handler')
        if not derr:
            derr = dbus_err

        trans.GetUpdates('all', reply_handler=dok, error_handler=derr)
        if kwargs.get('finished_handler'):
            trans.connect_to_signal('Finished', kwargs['finished_handler'])
        if kwargs.get('progress_handler'):
            trans.connect_to_signal('ProgressChanged', kwargs['progress_handler'])
        if kwargs.get('package_handler'):
            trans.connect_to_signal('Package', kwargs['package_handler'])
        return trans


    def listPackages(self, status, pattern, *args, **kwargs):
        self.checkConnection()
        tid = self.getTid()
        trans = self.transaction(tid)
        dok = kwargs.get('reply_handler')
        if not dok:
            dok = dbus_ok
        derr = kwargs.get('error_handler')
        if not derr:
            derr = dbus_err
        trans.SearchName(status, pattern, reply_handler=dok, error_handler=derr)
        if kwargs.get('finished_handler'):
            trans.connect_to_signal('Finished', kwargs['finished_handler'])
        if kwargs.get('progress_handler'):
            trans.connect_to_signal('ProgressChanged', kwargs['progress_handler'])
        if kwargs.get('package_handler'):
            trans.connect_to_signal('Package', kwargs['package_handler'])
        return trans

    def removePackages(self, packages, *args, **kwargs):
        self.checkConnection()
        tid = self.getTid()
        trans = self.transaction(tid)
        dok = kwargs.get('reply_handler')
        if not dok:
            dok = dbus_ok
        derr = kwargs.get('error_handler')
        if not derr:
            derr = dbus_err
        trans.RemovePackages(packages, False, False, reply_handler=dok, error_handler=derr)
        if kwargs.get('finished_handler'):
            trans.connect_to_signal('Finished', kwargs['finished_handler'])
        if kwargs.get('progress_handler'):
            trans.connect_to_signal('ProgressChanged', kwargs['progress_handler'])
        if kwargs.get('package_handler'):
            trans.connect_to_signal('Package', kwargs['package_handler'])
        return trans


class SHRInstallerGUI():

    class Bar(elementary.Box):
        btn1 = None
        btn2 = None
        box1 = None
        box2 = None
        bars = None

        def __init__(self, parent):
            super(SHRInstallerGUI.Bar, self).__init__(parent)

            self.bars = []

            self.horizontal_set(1)
            #self.pack_end(elementary.Button(self))
            self.box1 = elementary.Frame(self)
            self.box2 = elementary.Frame(self)

            self.box1.style_set('pad_small')
            self.box2.style_set('pad_small')

            self.box1.size_hint_weight_set(0.5, 1.0)
            self.box1.size_hint_align_set(-1.0, -1.0)

            self.box2.size_hint_weight_set(0.4, 1.0)
            self.box2.size_hint_align_set(-1.0, -1.0)

            self.box1.show()
            self.box2.show()
            self.pack_start(self.box1)
            self.pack_end(self.box2)
            self.size_hint_align_set(-1.0, 0.0) 

            self.push()

        def item(self, label, callback):
            if callback:
                btn = elementary.Button(self)
                btn.label_set(label)
                btn.clicked = callback
                btn.show()
            else:
                lab = elementary.Label(self)
                lab.label_set(label)
                lab.show()
                fr = elementary.Frame(self)
                fr.style_set('outdent_top')
                fr2 = elementary.Frame(self)
                fr2.style_set('pad_small')
                btn = elementary.Frame(self)
                btn.style_set('outdent_bottom')
                box = elementary.Box(btn)
                box.pack_end(lab)
                box.show()
                fr2.content_set(box)
                fr.content_set(fr2)
                btn.content_set(fr)
                fr.show()
                fr2.show()
                btn.show()
            btn.size_hint_weight_set(-1.0, -1.0)
            return btn


        def push(self, btn1l = "Next", btn2l = "Back", btn1c = None, btn2c = None):
            self.bars.append((btn1l, btn2l, btn1c, btn2c))
            self.update()

        def pop(self):
            self.bars.pop()
            self.update()

        def update(self):
            if self.btn1 and self.btn2:
                self.btn1.delete()
                self.btn2.delete()

            (btn1l, btn2l, btn1c, btn2c) = self.bars[len(self.bars)-1]
            self.btn1 = self.item(btn1l, btn1c)
            self.btn2 = self.item(btn2l, btn2c)
            self.box1.content_set(self.btn1)
            self.box2.content_set(self.btn2)

    class Dialog(elementary.InnerWindow):
        callback = None
        active = None

        def close(self, *args, **kwargs):
            if self.active:
                if self.callback:
                    self.callback()
                self.delete()
                self.active = False

        def __del__(self):
            self.close()

        def __init__(self, win, msg, *args, **kwargs):

            super(SHRInstallerGUI.Dialog, self).__init__(win)

            button = kwargs.get('button')
            self.callback = kwargs.get('button_callback')
            widgets = kwargs.get('widgets')
            self.active = True

            self.scale_set(1.2)
            txt = elementary.AnchorBlock(win)
            txt.text_set(msg)
            txt.show()
            fr = elementary.Frame(self)
            fr.style_set('pad_medium')
            fr.size_hint_weight_set(-1.0, -1.0)
            fr.size_hint_align_set(-1.0, -1.0)
            fr.content_set(txt)
            fr.show()
            box = elementary.Box(self)
            box.show()
            box.pack_start(fr)

            if widgets:
                for widget in widgets:
#                    widget.size_hint_align_set(-1.0, 0.0)
                    widget.show()
                    box.pack_end(widget)

            if button:
                btn = elementary.Button(self)
#                btn.size_hint_weight_set(1.0, 0.0)
                btn.size_hint_align_set(-1.0, 0.0)
                btn.label_set('OK')
                btn.show()
                btn.clicked = self.close
                box.pack_end(btn)

            self.content_set(box)
            if not kwargs.get('without_minimal'):
                self.style_set("minimal_vertical")
            win.resize_object_add(self)
            self.activate()

    installer = None
    win = None
    pager = None
    bar = None
    animstep = None
    bus = None
    selected = None

    def __init__(self, installer):
        mainloop = e_dbus.DBusEcoreMainLoop()
        self.bus = dbus.SystemBus(mainloop=mainloop)
        self.installer = installer(self.bus, len(argv)==2) # FIXME
        elementary.init()  
        # elementary configuration
        elementary.c_elementary.finger_size_set(95)
        self.win = elementary.Window('shr-installer', elementary.ELM_WIN_BASIC)
        self.pager = elementary.Pager(self.win)
        self.bar = self.Bar(self.win)
        self.animstep = -1
        self.selected = False

    def stepAnimation(self):
        if self.animation:
            self.animstep += 1
            if self.animstep==3:
                for anim in self.anim:
                    anim.hide()
                self.animstep = -1;
            else:
                self.anim[self.animstep].show()
            return True
        else:
            self.animstep = -1
            return False

    def startAnimation(self, box):
        self.anim = [elementary.Label(self.win), elementary.Label(self.win), elementary.Label(self.win)]
        for anim in self.anim:
            anim.label_set('.')
            box.pack_end(anim)
        self.animation = True
        ecore.timer_add(1, self.stepAnimation)

    def stopAnimation(self):
        self.animation = False
        for anim in self.anim:
            anim.show()

    def run(self):
        elementary.run()
        elementary.shutdown()
        print "..."
        self.installer = None

    def destroy(self, *args, **kwargs):
        elementary.exit()

    def options(self, *args, **kwargs):
        scr = elementary.Scroller(self.pager)
        scr.show()
        box = elementary.Box(scr)
        label = elementary.Label(box)
        label.label_set('Options')
        label.show()
        box.pack_end(label)
        box.show()
        scr.content_set(box)
        self.pager.content_push(scr)
        self.bar.push('About', 'Back', self.about, self.back)

    def connect(self, dia):
        if not self.installer.connect():
            self.Dialog(self.win, "Could not connect to PackageKit. Aborting.", button=True, button_callback=self.destroy)
        dia.close()
        self.bar.push('Options', 'Quit', self.options, self.destroy)
        return False

    def labelFinished(self, lab, pkglab, status, *args, **kwargs):
        if status=='success':
            lab.label_set('OK')
        elif status=='failed':
            lab.label_set('FAIL')
        else:
            lab.label_set('???')
            print status
        if pkglab:
           pkglab.delete()
        self.stopAnimation()
        self.bar.pop()

    def labelProgress(self, lab, pro, *args, **kwargs):
        if pro!=101:
            lab.label_set(str(pro) + '%')
            lab.color_set(0, 0, 0, (pro*2)+55 )

    def cancel(self, transaction, *args, **kwargs):
        self.installer.cancel(transaction)
        self.bar.pop()

    def toggleChanged(self, togglelist, callback, obj, *args, **kwargs):
        selected = False
        try:
            if obj.state_get():
                selected = True
        except:
            print "something went wrong"

        if not selected:
            for info in togglelist:
                if togglelist[info].state_get():
                    selected = True
                    break
        if selected:
            if not self.selected:
                self.bar.push('Next', 'Back', partial(callback, togglelist), self.back)
            self.selected = True
        else:
            self.bar.pop()
            self.selected = False      

    def labelPackage(self, label, verbose, state, info, *args, **kwargs):
        (name, version, arch, something) = info.split(';')
        prev = ''
        after = ''
        if verbose:
            prev = state.capitalize() + ' '
            after = '...'

        label.label_set(prev + name + after)

    def handlePackage(self, list, togglelist, callback, status, info, desc, *args, **kwargs):
        toggle = elementary.Check(list)
        toggle._callback_add("changed", partial(self.toggleChanged, togglelist, callback))
        toggle.show()
        togglelist[info] = toggle
        (name, version, arch, empty) = info.split(';')
        list.item_append(name, toggle, None, None)
        list.go()

    def installSelected(self, togglelist, *args, **kwargs):
        for info in togglelist:
            if togglelist[info].state_get():
                print info

    def back2(self, *args, **kwargs):
        self.back()
        self.back()

    def removeSelected(self, togglelist, *args, **kwargs):
        toremove = []
        for info in togglelist:
            if togglelist[info].state_get():
                toremove.append(info)

        box = elementary.Box(self.pager)
        box.show()

        animbox = elementary.Box(box)
        animbox.horizontal_set(1)
        animbox.show()

        la = elementary.Label(animbox)
        la.label_set('Removing selected packages')
        la.show()

        animbox.pack_start(la)

        box.pack_start(animbox)

        lab = elementary.Label(box)
        lab.show()
        box.pack_end(lab)
        lab.scale_set(6.0)

        pkglab = elementary.Label(box)
        pkglab.show()
        box.pack_end(pkglab)

        self.installer.removePackages(toremove, package_handler=partial(self.labelPackage, pkglab, False), finished_handler=partial(self.labelFinished, lab, pkglab), progress_handler=partial(self.labelProgress, lab))

        self.pager.content_push(box)
        self.startAnimation(animbox)
        self.bar.push('Next', 'Back', None, self.back2)
        self.bar.push('Next', 'Cancel', None, None)

    def install(self, *args, **kwargs):
        list = elementary.List(self.pager)
        list.show()
        togglelist = {}
        list.go()
        #self.installer.listPackages('available', 'opi', package_handler=partial(self.handlePackage, list, togglelist, self.installSelected))
        self.Dialog(self.win, 'Not implemented yet.', button=True)
        self.pager.content_push(list)
        self.bar.push('Next', 'Back', None, self.back)

    def removeListError(self, dia, x, *args, **kwargs):
        anchor = elementary.AnchorView(self.win)
        anchor.size_hint_weight_set(1.0, 1.0)
        anchor.size_hint_align_set(-1.0, -1.0)
        anchor.text_set(str(x))
        anchor.show()
        dia.delete()
        self.Dialog(self.win, 'Error: ', widgets=[anchor], without_minimal=True, button=True, button_callback=self.back)

    def removeListFinished(self, dia, status, *args, **kwargs):
        dia.delete()
        if status != 'success':
            self.Dialog(self.win, 'Searching failed.', button=True, button_callback = self.back)

    def removeList(self, list, togglelist, entry, *args, **kwargs):
        dia = self.Dialog(self.win, 'Searching...')
        self.installer.listPackages('installed', entry.entry_get().replace('<br>',''), package_handler=partial(self.handlePackage, list, togglelist, self.removeSelected), finished_handler=partial(self.removeListFinished, dia), error_handler=partial(self.removeListError, dia))

    def remove(self, *args, **kwargs):
        list = elementary.List(self.pager)
        list.show()
        togglelist = {}
        list.go()
        entryscr = elementary.Scroller(self.pager)
        entryscr.content_min_limit(0,1)
        entryscr.bounce_set(0, 0)
        entryscr.policy_set(elementary.ELM_SCROLLER_POLICY_OFF, elementary.ELM_SCROLLER_POLICY_OFF)
        entryscr.size_hint_weight_set(1.0, 0.0)
        entryscr.size_hint_align_set(-1.0, -1.0)
        entry = elementary.Entry(self.pager)
        entry.show()
        entry.size_hint_weight_set(1.0, 0.0)
        entry.size_hint_align_set(-1.0, -1.0)
        entry.single_line_set(True)
        entry.scale_set(3.0)
        entryscr.content_set(entry)
        
        self.Dialog(self.win, 'Enter package name:', widgets=[entryscr], button=True, button_callback=partial(self.removeList, list, togglelist, entry))
        self.pager.content_push(list)
        self.bar.push('Next', 'Back', None, self.back)

    def upgrade(self, *args, **kwargs):
        list = elementary.List(self.pager)
        list.show()
        togglelist = {}
        list.go()
#        self.installer.listUpgradable(package_handler=partial(self.handlePackage, list, togglelist))
        self.Dialog(self.win, 'Not implemented yet.', button=True, button_callback = self.back)
        self.pager.content_push(list)
        self.bar.push('Next', 'Back', None, self.back)  

    def update(self, *args, **kwargs):
        box = elementary.Box(self.pager)
        box.show()

        animbox = elementary.Box(box)
        animbox.horizontal_set(1)
        animbox.show()

        la = elementary.Label(animbox)
        la.label_set('Refreshing package list')
        la.show()

        animbox.pack_start(la)

        box.pack_start(animbox)

        lab = elementary.Label(box)
        lab.show()
        box.pack_end(lab)
        lab.scale_set(6.0)

        trans = self.installer.update(finished_handler=partial(self.labelFinished, lab, None), progress_handler=partial(self.labelProgress, lab))
        self.pager.content_push(box)
        self.startAnimation(animbox)
        self.bar.push('Next', 'Back', None, self.back)
        self.bar.push('Next', 'Cancel', None, None)

    def back(self, *args, **kwargs):
        if self.selected:
            self.bar.pop()
            self.selected = False
        self.pager.content_pop()
        self.bar.pop()

    def about(self, *args, **kwargs):
        anchorview = elementary.AnchorView(self.pager)

        text = '''<b>SHR Installer</b><br>This is SHR Installer!'''

        anchorview.text_set(text)
        anchorview.show()
        self.pager.content_push(anchorview)
        self.bar.push('Next', 'Back', None, self.back)

    def menu(self):
        box = elementary.Box(self.pager)
        fr = elementary.Frame(box)
        lab = elementary.Label(fr)#change to AnchorBlock
        lab.label_set('What do you want to do today?')

        lab.show()
        labox = elementary.Box(fr)
        labox.pack_start(lab)
        labox.show()
#        lab.size_hint_align_set(0.5, 0.0)
#        lab.size_hint_weight_set(-1.0, 0.0)
        fr.scale_set(1.3)
        fr.style_set('outdent_top')
        fr.content_set(labox)
        fr.show()
        fr.size_hint_align_set(-1.0, -1.0)
        fr.size_hint_weight_set(1.0, 0.0)
        list = elementary.List(self.pager)
        list.size_hint_weight_set(1.0, 1.0)
        list.size_hint_align_set(-1.0, -1.0)
        list.show()
        box.pack_start(fr)
        box.pack_end(list)
        box.show()

        items = [('Install new packages',None, None, self.install),
                 ('Upgrade system', None, None, self.upgrade),
                 ('Update package cache', None, None, self.update),
                 ('Remove packages', None, None, self.remove)]

        for item in items:
            list.item_append(item[0], item[1], item[2], item[3])

        self.pager.content_push(box)  

        list.go()

    def main(self):
        self.win.title_set('Installer')
        self.win.destroy = self.destroy
        bg = elementary.Background(self.win)
        self.win.resize_object_add(bg)
        bg.show()

        box = elementary.Box(self.win)
        self.pager.scale_set(1.0)
        box.pack_start(self.pager)
        self.pager.size_hint_weight_set(1.0, 1.0)
        self.pager.size_hint_align_set(-1.0, -1.0)
        self.pager.show()

        box.pack_end(self.bar)
        self.bar.show()

        box.show()
        self.win.resize_object_add(box)
        self.menu()

        inwin = self.Dialog(self.win, 'Connecting to PackageKit...')

        ecore.idler_add(partial(self.connect, inwin))

        self.win.show()

if __name__ == "__main__":

    print "SHR Installer"

    ui = SHRInstallerGUI(SHRInstaller)
    ui.main()

    ui.run()
